desc:SOX Reverb include file
// provides utility functions for reverb effect of SOX implementing
// the classical Freeverb
tags: reverb
author: Dr. Thomas Tensi, 2019

//requires Base.jsfx-inc
//requires Base_fixedarray.jsfx-inc
//requires Base_debug.jsfx-inc
//requires SOX__samplequeue.jsfx-inc

@init
    //============================================================

    // configuration parameters
    SOXReverb_maximumRoomScale   = 1.0;
    SOXReverb_maximumStereoDepth = 1.0;
    SOXReverb_maximumPredelay    = 0.5;

    // Freeverb construction parameters
    SOXReverb_lineCombFilterCount    = 8;
    SOXReverb_lineAllpassFilterCount = 4;
    SOXReverb_stereoSpread = 12;
    SOXReverb_allpassFactor = 0.5;

    //--------------------
    // AllpassFilter
    //--------------------
    // a simple allpass filter with an associated sample queue as a
    // delay line
    //--------------------

    SOXAllpassFilter_SIZE = 1;
    SOXAllpassFilter_sampleQueue = 1;

    //--------------------

    function SOXAllpassFilter_make (sampleQueue)
        /** Makes allpass filter with given <sampleQueue> and returns
            it */
        local (self)
    (
        self = FixedArray_make(SOXAllpassFilter_SIZE);
        FixedArray_setAt(self,
                         SOXAllpassFilter_sampleQueue, sampleQueue);
        self
    );

    //--------------------

    function SOXAllpassFilter_apply (self, inputSample)
        /** Applies allpass filter <self> to <inputSample> */
        local (newSample outputSample sampleQueue)
    (
        sampleQueue = FixedArray_getAt(self,
                                       SOXAllpassFilter_sampleQueue);
        outputSample = SOXSampleQueue_first(sampleQueue);
        newSample = inputSample + outputSample * SOXReverb_allpassFactor;
        SOXSampleQueue_shiftLeft(sampleQueue, newSample);
        outputSample - inputSample
    );

    //--------------------
    // CombFilter
    //--------------------
    // a simple Schr√∂der-Moorer comb filter with an associated sample
    // queue as a delay line and a single stored sample
    //--------------------

    SOXCombFilter_SIZE = 2;
    SOXCombFilter_sampleQueue  = 1;
    SOXCombFilter_storedSample = 2;

    //--------------------

    function SOXCombFilter_make (sampleQueue)
        /** Makes comb filter with given <sampleQueue> and returns it */
        local (self)
    (
        self = FixedArray_make(SOXCombFilter_SIZE);
        FixedArray_setAt(self, SOXCombFilter_sampleQueue, sampleQueue);
        FixedArray_setAt(self, SOXCombFilter_storedSample, 0);
        self
    );

    //--------------------

    function SOXCombFilter_apply (self, inputSample, feedback, hfDamping)
        /** Applies comb filter <self> to <inputSample> with
            <feedback> and <hfDamping> */
        local (outputSample sampleQueue storedSample)
    (
        sampleQueue  = FixedArray_getAt(self, SOXCombFilter_sampleQueue);
        storedSample = FixedArray_getAt(self, SOXCombFilter_storedSample);

        outputSample = SOXSampleQueue_first(sampleQueue);
        storedSample = (outputSample
                        + (storedSample - outputSample) * hfDamping);
        inputSample += storedSample * feedback;
        SOXSampleQueue_shiftLeft(sampleQueue, inputSample);
        FixedArray_setAt(self, SOXCombFilter_storedSample, storedSample);
        outputSample
    );

    //--------------------
    // ReverbLineDelays
    //--------------------
    // the sample queues of filters in a reverb line: those apply
    // either to comb or allpass filters; the coefficients are the
    // canonical values for Freeverb
    //--------------------

    SOXReverbLineDelays_allpassFilterLengthList = null;
    SOXReverbLineDelays_combFilterLengthList    = null;

    SOXReverbLineDelays_referenceSampleRate = 44100.0;

    //--------------------

    function SOXReverbLineDelays_initialize ()
        /** Initializes length lists for comb and allpass filters */
        local (r)
    (
        r = FixedArray_make(SOXReverb_lineCombFilterCount);
        FixedArray_setAt(r, 1, 1116);
        FixedArray_setAt(r, 2, 1188);
        FixedArray_setAt(r, 3, 1277);
        FixedArray_setAt(r, 4, 1356);
        FixedArray_setAt(r, 5, 1422);
        FixedArray_setAt(r, 6, 1491);
        FixedArray_setAt(r, 7, 1557);
        FixedArray_setAt(r, 8, 1617);
        SOXReverbLineDelays_combFilterLengthList = r;

        r = FixedArray_make(SOXReverb_lineAllpassFilterCount);
        FixedArray_setAt(r, 1, 225);
        FixedArray_setAt(r, 2, 341);
        FixedArray_setAt(r, 3, 441);
        FixedArray_setAt(r, 4, 556);
        SOXReverbLineDelays_allpassFilterLengthList = r;
    );

     //--------------------

     function SOXReverbLineDelays_length (isCreation, isCombFilter,
                                          index, sampleRate, roomScale,
                                          stereoDepth)
        /** Returns length of filter delay line for given parameters;
            if <isCreation> is set, the maximum length for those
            parameters is returned */
        local (adjustment factor length lengthList offset result)
    (
        roomScale = iif(isCreation, SOXReverb_maximumRoomScale,
                        isCombFilter, roomScale, 1.0);
        factor = (sampleRate / SOXReverbLineDelays_referenceSampleRate
                  * roomScale);
        offset = iif(isCreation, SOXReverb_maximumStereoDepth,
                     stereoDepth * (-1) ^ (index - 1));
        lengthList = iif(isCombFilter,
                         SOXReverbLineDelays_combFilterLengthList,
                         SOXReverbLineDelays_allpassFilterLengthList);
        length = FixedArray_getAt(lengthList, index);
        adjustment = SOXReverb_stereoSpread;
        result = round(factor * (length + adjustment * offset));
        result
    );

    //--------------------
    //--------------------

    function SOXReverbLineDelays_make (isCombFilter, index, sampleRate)
        /** Makes filter delay line for given parameters with maximum
            length */
        local (queueLength self)
    (
        // calculate maximum queue length with arbitrary values for
        // <channel>, <roomScale> and <stereoDepth>
        queueLength = SOXReverbLineDelays_length(true, isCombFilter,
                                                 index, sampleRate, 0, 0);
        self = SOXSampleQueue_make(queueLength);
        self
    );

    //--------------------

    function SOXReverbLineDelays_adjustLength (self, isCombFilter,
                                               index, sampleRate,
                                               roomScale, stereoDepth)
        /** Adjusts lengths of filter queue <self> according to
            parameters <isCombFilter>, <sampleRate>, <roomScale> and
            <stereoDepth> to their effective length */
        local (queueLength)
    (
        queueLength =
            SOXReverbLineDelays_length(false, isCombFilter, index,
                                       sampleRate, roomScale, stereoDepth);
        SOXSampleQueue_setEffectiveLength(self, queueLength);
    );

    //--------------------
    // ReverbLine
    //--------------------
    // a list of filters with delay lines forming a single channel
    // in Freeverb
    //--------------------

    SOXReverbLine_SIZE = 4;
    SOXReverbLine_combFilterSampleQueueList    = 1;
    SOXReverbLine_allpassFilterSampleQueueList = 2;
    SOXReverbLine_combFilterList               = 3;
    SOXReverbLine_allpassFilterList            = 4;

    //--------------------

    function SOXReverbLine_make (sampleRate)
        /** Constructs a complete reverb line and all filters; creates
            all sample queues with maximum length to be adapted by
            later adjustments */
        local (elementCount filter filterList filterSampleQueueList
               i isCombFilter listIndex sampleQueue self)
    (
        self = FixedArray_make(SOXReverbLine_SIZE);

        // make the filter delay lines
        listIndex  = SOXReverbLine_combFilterSampleQueueList;
        elementCount = SOXReverb_lineCombFilterCount;
        isCombFilter = true;

        while (listIndex <= SOXReverbLine_allpassFilterSampleQueueList) (
            filterSampleQueueList = FixedArray_make(elementCount);
            FixedArray_setAt(self, listIndex, filterSampleQueueList);
            i = 1;

            while (i <= elementCount) (
                sampleQueue =
                    SOXReverbLineDelays_make(isCombFilter, i, sampleRate);
                FixedArray_setAt(filterSampleQueueList, i, sampleQueue);
                i += 1;
            );

            isCombFilter = !isCombFilter;
            elementCount = SOXReverb_lineAllpassFilterCount;
            listIndex += 1;
        );

        // make the filters and assign the preconstructed delay lines
        listIndex = SOXReverbLine_combFilterList;
        elementCount = SOXReverb_lineCombFilterCount;

        while (listIndex <= SOXReverbLine_allpassFilterList) (
            filterList = FixedArray_make(elementCount);
            FixedArray_setAt(self, listIndex, filterList);
            filterSampleQueueList = FixedArray_getAt(self, listIndex - 2);
            i = 1;

            while (i <= elementCount) (
                sampleQueue = FixedArray_getAt(filterSampleQueueList, i);

                isCombFilter ? (
                    filter = SOXCombFilter_make(sampleQueue)
                ) : (
                    filter = SOXAllpassFilter_make(sampleQueue)
                );

                FixedArray_setAt(filterList, i, filter);
                i += 1;
            );

            isCombFilter = !isCombFilter;
            elementCount = SOXReverb_lineAllpassFilterCount;
            listIndex += 1;
        );

        self
    );

    //--------------------
    //--------------------

    function SOXReverbLine_adjustQueueLengths (self, sampleRate,
                                               roomScale, stereoDepth)
        /** Adjusts lengths of all filter queues in reverb line <self>
            according to parameters <sampleRate>, <roomScale> and
            <stereoDepth> to their effective length */
        local (filterSampleQueueList i isCombFilter
               queueCount queueLength queueListIndex sampleQueue)
    (
        // adapt lengths of filter delay lines
        queueListIndex = SOXReverbLine_combFilterSampleQueueList;
        isCombFilter = true;

        while (queueListIndex <= SOXReverbLine_allpassFilterSampleQueueList) (
            filterSampleQueueList = FixedArray_getAt(self, queueListIndex);
            queueCount = FixedArray_length(filterSampleQueueList);
            i = 1;

            while (i <= queueCount) (
                sampleQueue = FixedArray_getAt(filterSampleQueueList, i);
                SOXReverbLineDelays_adjustLength(sampleQueue,
                                                 isCombFilter, i, sampleRate,
                                                 roomScale, stereoDepth);
                i += 1;
            );

            queueListIndex += 1;
            isCombFilter = false;
        );
    );

    //--------------------

    function SOXReverbLine_apply (self, inputSample,
                                  feedback, hfDamping, gain)
        /** Applies reverb line <self> to <inputSample> and returns
            output sample with parameters <feedback>, <hfDamping> and
            <gain>; the comb filters are applied to the input in
            parallel, the allpass filters in series */
        local (filter filterList i outputSample)
    (
        // route input sample through the filters
        outputSample = 0;

        // process comb filters in parallel
        i = SOXReverb_lineCombFilterCount;
        filterList =
            FixedArray_getAt(self, SOXReverbLine_combFilterList);

        while (i >= 1) (
            filter = FixedArray_getAt(filterList, i);
            outputSample += SOXCombFilter_apply(filter, inputSample,
                                                 feedback, hfDamping);
            i -= 1;
        );

        // process allpass filters in series
        i = SOXReverb_lineAllpassFilterCount;
        filterList =
            FixedArray_getAt(self, SOXReverbLine_allpassFilterList);

        while (i >= 1) (
            filter = FixedArray_getAt(filterList, i);
            outputSample = SOXAllpassFilter_apply(filter, outputSample);
            i -= 1;
        );

        outputSample *= gain;
        outputSample
    );

    //--------------------

    function SOXReverbLine_print (self)
        /** Prints a representation of reverb line <self> to debug
            output */
        local (filter filterList filterListCount i index isCombFilter
               listIndex sampleQueue st template)
    (
        st = String_make();

        Debug_printLine("ReverbLine");
        listIndex = SOXReverbLine_combFilterList;
        isCombFilter = true;

        while (listIndex <= SOXReverbLine_allpassFilterList) (
            template = iif(isCombFilter, "cf(%d)", "af(%d)");
            filterList = FixedArray_getAt(self, listIndex);
            filterListCount = FixedArray_length(filterList);
            i = 1;

            while (i <= filterListCount) (
                index = iif(isCombFilter, SOXCombFilter_sampleQueue,
                            SOXAllpassFilter_sampleQueue);
                filter = FixedArray_getAt(filterList, i);
                String_format(st, template, i);
                sampleQueue = FixedArray_getAt(filter, index);
                Debug_printValue(st,
                                 SOXSampleQueue_length(sampleQueue));
                i += 1;
            );

            listIndex += 1;
            isCombFilter = false;
        );

         String_destroy(st);
    );

    //--------------------
    // Reverb Channel
    //--------------------
    // a reverb channel processes a single stereo channel via either
    // one or two reverb lines (depending on whether stereo depth is
    // greater than 0 or not); also there is a delay of the input
    // sample via a channel delay line (when predelay is non-zero)
    //--------------------

    SOXReverbChannel_SIZE = 3;
    SOXReverbChannel_inputSampleQueue  = 1;
    SOXReverbChannel_reverbLineCount   = 2;
    SOXReverbChannel_reverbLineList    = 3;

    //--------------------
    //--------------------

    function SOXReverbChannel_make (sampleRate)
        /** Constructs a complete reverb line with predelay line and
            all filters for one channel; creates all sample queues
            with maximum length to be adapted by later adjustments */
        local (i inputSampleQueue maximumPredelayInSamples
               reverbLine reverbLineCount reverbLineList self)
    (
        self = FixedArray_make(SOXReverbChannel_SIZE);

        // make delay line for input (predelay)
        maximumPredelayInSamples = round(sampleRate
                                         * SOXReverb_maximumPredelay);
        inputSampleQueue = SOXSampleQueue_make(maximumPredelayInSamples);
        FixedArray_setAt(self, SOXReverbChannel_inputSampleQueue,
                         inputSampleQueue);

        reverbLineCount = 2;
        FixedArray_setAt(self, SOXReverbChannel_reverbLineCount,
                         reverbLineCount);

        // make two reverb lines for possible stereo processing
        reverbLineList = FixedArray_make(2);
        FixedArray_setAt(self, SOXReverbChannel_reverbLineList,
                         reverbLineList);
        i = 1;

        while (i <= reverbLineCount) (
            reverbLine = SOXReverbLine_make(sampleRate);
            FixedArray_setAt(reverbLineList, i, reverbLine);
            i += 1;
        );

        self
    );

    //--------------------

    function SOXReverbChannel_adjustQueueLengths (self, sampleRate,
                                                  predelay, roomScale,
                                                  stereoDepth)
        /** Adjusts lengths of all filter queues in reverb channel
            <self> according to parameters <sampleRate>, <roomScale>
            and <stereoDepth> to their effective length; adjusts input
            queue to length <predelay> */
        local (effectiveStereoDepth i inputSampleQueue queueLength
               reverbLine reverbLineCount reverbLineList)
    (
        // adapt length of predelay line
        inputSampleQueue =
            FixedArray_getAt(self, SOXReverbChannel_inputSampleQueue);
        queueLength = round(predelay * sampleRate);
        SOXSampleQueue_setEffectiveLength(inputSampleQueue, queueLength);

        // adapt lengths of reverb lines; when stereo depth is zero,
        // only a single reverb line is used per channel
        reverbLineCount = (stereoDepth == 0 ? 1 : 2);
        reverbLineList =
            FixedArray_getAt(self, SOXReverbChannel_reverbLineList);
        i = 1;

        while (i <= reverbLineCount) (
            reverbLine = FixedArray_getAt(reverbLineList, i);
            effectiveStereoDepth = (i == 1 ? 0 : stereoDepth);
            SOXReverbLine_adjustQueueLengths(reverbLine, sampleRate,
                                             roomScale,
                                             effectiveStereoDepth);
            i += 1;
        );

        FixedArray_setAt(self, SOXReverbChannel_reverbLineCount,
                         reverbLineCount);
    );

    //--------------------

    function SOXReverbChannel_apply (self, inputSample,
                                     feedback, hfDamping, gain,
                                     outputSampleList)
        /** Applies reverb channel <self> to <inputSample> and returns
            output samples with parameters <feedback>, <hfDamping> and
            <gain> in <outputSampleList> */
        local (firstSample i outputSample inputSampleQueue
               reverbLine reverbLineCount reverbLineList)
    (
        // check and process predelay
        inputSampleQueue =
            FixedArray_getAt(self, SOXReverbChannel_inputSampleQueue);

        SOXSampleQueue_length(inputSampleQueue) > 0 ? (
            firstSample = SOXSampleQueue_first(inputSampleQueue);
            SOXSampleQueue_shiftLeft(inputSampleQueue, inputSample);
            inputSample = firstSample;
        );

        // process all reverb lines for this channel and store their
        // results in output sample list
        reverbLineCount =
            FixedArray_getAt(self, SOXReverbChannel_reverbLineCount);
        reverbLineList =
            FixedArray_getAt(self, SOXReverbChannel_reverbLineList);

        i = 1;

        while (i <= reverbLineCount) (
            reverbLine = FixedArray_getAt(reverbLineList, i);
            outputSample = SOXReverbLine_apply(reverbLine, inputSample,
                                               feedback, hfDamping, gain);
            FixedArray_setAt(outputSampleList, i, outputSample);
            i += 1;
        );
    );

    //--------------------

    function SOXReverbChannel_print (self)
        /** Prints a representation of reverb channel <self> to debug
            output */
        local (i inputSampleQueue reverbLine reverbLineCount
               reverbLineList)
    (
        Debug_printLine("ReverbChannel");

        // print information about predelay queue
        inputSampleQueue =
            FixedArray_getAt(self, SOXReverbChannel_inputSampleQueue);
        Debug_printValue("predelay",
                         SOXSampleQueue_length(inputSampleQueue));

        // print information about reverb lines
        reverbLineCount =
            FixedArray_getAt(self, SOXReverbChannel_reverbLineCount);
        reverbLineList =
            FixedArray_getAt(self, SOXReverbChannel_reverbLineList);
        i = 1;

        while (i <= reverbLineCount) (
            reverbLine = FixedArray_getAt(reverbLineList, i);
            SOXReverbLine_print(reverbLine);
            i += 1;
        );
    );

    //--------------------
    // Reverb
    // stores global reverb parameters
    //--------------------

    SOXReverb_SIZE = 8;
    SOXReverb_isWetOnly         = 1;
    SOXReverb_feedback          = 2;
    SOXReverb_hfDamping         = 3;
    SOXReverb_predelay          = 4;
    SOXReverb_stereoDepth       = 5;
    SOXReverb_wetGain           = 6;
    SOXReverb_roomScale         = 7;
    SOXReverb_reverbChannelList = 8;

    //--------------------

    function SOXReverb_make ()
        /** Constructs a new SOX reverb */
        local (channel reverbChannel reverbChannelList self)
    (
        self = FixedArray_make(SOXReverb_SIZE);
        reverbChannelList = FixedArray_make(SOX_channelCount);
        FixedArray_setAt(self, SOXReverb_reverbChannelList,
                         reverbChannelList);
        channel = 1;

        while (channel <= SOX_channelCount) (
            reverbChannel = SOXReverbChannel_make(srate);
            FixedArray_setAt(reverbChannelList, channel, reverbChannel);
            channel += 1;
        );

        self
    );

    //--------------------

    SOXReverb_wetSamplePairList = null;

    //--------------------

    function SOXReverb_apply (self, inputSampleList, outputSampleList)
        /** Applies reverb <self> to samples for all channels in
            <inputSampleList> and writes result in
            <outputSampleList> */
        local (channel feedback hfDamping inputSample isWetOnly
               hasMultipleLines outputSample otherWetSamplePair
               reverbChannel reverbChannelList stereoDepth wetGain
               wetSamplePair wetSamplePairList)
    (
        feedback    = FixedArray_getAt(self, SOXReverb_feedback);
        hfDamping   = FixedArray_getAt(self, SOXReverb_hfDamping);
        isWetOnly   = FixedArray_getAt(self, SOXReverb_isWetOnly);
        stereoDepth = FixedArray_getAt(self, SOXReverb_stereoDepth);
        wetGain     = FixedArray_getAt(self, SOXReverb_wetGain);

        reverbChannelList =
            FixedArray_getAt(self, SOXReverb_reverbChannelList);
        wetSamplePairList = SOXReverb_wetSamplePairList;

        // collect all wet sample pairs
        channel = 1;

        while (channel <= SOX_channelCount) (
            wetSamplePair = FixedArray_getAt(wetSamplePairList, channel);
            reverbChannel = FixedArray_getAt(reverbChannelList, channel);
            inputSample   = FixedArray_getAt(inputSampleList, channel);
            SOXReverbChannel_apply(reverbChannel, inputSample,
                                   feedback, hfDamping, wetGain,
                                   wetSamplePair);
            channel += 1;
        );

        // combine wet sample pairs with input samples
        hasMultipleLines = (stereoDepth > 0);
        channel = 1;

        while (channel <= SOX_channelCount) (
            wetSamplePair = FixedArray_getAt(wetSamplePairList, channel);

            !hasMultipleLines ? (
                outputSample = wetSamplePair[1];
            ):(
                otherWetSamplePair =
                    FixedArray_getAt(wetSamplePairList, 3 - channel);
                outputSample = (wetSamplePair[channel]
                                + otherWetSamplePair[channel]) / 2;
            );

            inputSample  = FixedArray_getAt(inputSampleList, channel);
            outputSample += isWetOnly ? 0 : inputSample;
            FixedArray_setAt(outputSampleList, channel, outputSample);
            channel += 1;
        );
    );

    //--------------------

    function SOXReverb_init (self, isWetOnly, reverberanceInPercent,
                             hfDampingInPercent, roomScaleInPercent,
                             stereoDepthInPercent, predelay, wetDbGain)
        /** Initializes reverb <self> with <isWetOnly>,
            <reverberanceInPercent>, <hfDampingInPercent>,
            <roomScaleInPercent>, <stereoDepthInPercent>, <predelay>
            and <wetDbGain> */
        local (channel feedback hfDamping maximumFeedback minimumFeedback
               queueLength reverbChannel reverbChannelList roomScale
               stereoDepth wetGain)
    (
        // adjust parameter value ranges
        reverberanceInPercent =
            forceToPercentage(reverberanceInPercent);
        hfDampingInPercent = forceToPercentage(hfDampingInPercent);
        roomScaleInPercent = forceToPercentage(roomScaleInPercent);
        stereoDepthInPercent = forceToPercentage(stereoDepthInPercent);
        predelay = forceToRange(predelay, 0, SOXReverb_maximumPredelay);
        wetDbGain = forceToRange(wetDbGain, -10, 10);

        // calculate technical parameters
        minimumFeedback =  -1 / ln(1 - 0.3);
        maximumFeedback = 100 / (ln(1 - 0.98) * minimumFeedback + 1);
        feedback = 1 - exp((reverberanceInPercent - maximumFeedback)
                           / (minimumFeedback * maximumFeedback));
        hfDamping = hfDampingInPercent / 100 * 0.3 + 0.2;
        stereoDepth = stereoDepthInPercent / 100;
        roomScale = roomScaleInPercent / 100 * 0.9 + 0.1;
        wetGain = SOX_dBToLinear(wetDbGain) * 0.015;

        FixedArray_setAt(self, SOXReverb_isWetOnly,   isWetOnly);
        FixedArray_setAt(self, SOXReverb_feedback,    feedback);
        FixedArray_setAt(self, SOXReverb_hfDamping,   hfDamping);
        FixedArray_setAt(self, SOXReverb_predelay,    predelay);
        FixedArray_setAt(self, SOXReverb_stereoDepth, stereoDepth);
        FixedArray_setAt(self, SOXReverb_wetGain,     wetGain);
        FixedArray_setAt(self, SOXReverb_roomScale,   roomScale);

        reverbChannelList = FixedArray_getAt(self,
                                             SOXReverb_reverbChannelList);
        channel = 1;

        while (channel <= SOX_channelCount) (
            reverbChannel = FixedArray_getAt(reverbChannelList, channel);
            SOXReverbChannel_adjustQueueLengths(reverbChannel, srate,
                                                predelay, roomScale,
                                                stereoDepth);
            channel += 1;
        );
    );

    //--------------------

    function SOXReverb_print (self)
        /** Prints a representation of reverb <self> to debug
            output */
        local (i reverbChannelCount reverbChannel reverbChannelList)
    (
        Debug_printValue("[H1]isWetOnly",
                         FixedArray_getAt(self, SOXReverb_isWetOnly));
        Debug_printValue("feedback",
                         FixedArray_getAt(self, SOXReverb_feedback));
        Debug_printValue("hfDamping",
                         FixedArray_getAt(self, SOXReverb_hfDamping));
        Debug_printValue("predelay",
                         FixedArray_getAt(self, SOXReverb_predelay));
        Debug_printValue("stereoDepth",
                         FixedArray_getAt(self, SOXReverb_stereoDepth));
        Debug_printValue("wetGain",
                         FixedArray_getAt(self, SOXReverb_wetGain));
        Debug_printValue("roomScale",
                         FixedArray_getAt(self, SOXReverb_roomScale));

        reverbChannelList = FixedArray_getAt(self,
                                             SOXReverb_reverbChannelList);
        reverbChannelCount = FixedArray_length(reverbChannelList);
        i = 1;

        while (i <= reverbChannelCount) (
            reverbChannel = FixedArray_getAt(reverbChannelList, i);
            SOXReverbChannel_print(reverbChannel);
            i += 1;
        );
    );

    //--------------------
    //--------------------

    function SOXReverb_initialize ()
        /** Initializes supporting data structures */
        local (channel pair)
    (
        SOXReverbLineDelays_initialize();

        // when stereo depth is non-zero for a reverb, each reverb
        // channel produces a pair of output samples to be stored in a
        // list of wet result pairs
        SOXReverb_wetSamplePairList = FixedArray_make(SOX_channelCount);
        channel = 1;

        while (channel <= SOX_channelCount) (
            pair = FixedArray_make(2);
            FixedArray_setAt(SOXReverb_wetSamplePairList, channel, pair);
            channel += 1;
        );
    );

    //============================================================
