desc: Display utilities for debugging
author: Dr. Thomas Tensi, 2019

@init
    //========================================
    // Color
    //========================================

    function Graphics_Color_bluePart (self)
        /** Returns the blue component of <self> */
    (
        self & 0xFF
    );

    //--------------------

    function Graphics_Color_greenPart (self)
        /** Returns the green component of <self> */
    (
        (self >> 8) & 0xFF
    );

    //--------------------

    function Graphics_Color_redPart (self)
        /** Returns the red component of <self> */
    (
        (self >> 16) & 0xFF
    );

    //--------------------

    function Graphics_Color_set (self)
        /** Sets current color to <self> */
        local (blue green red)
    (
        blue  = Graphics_Color_bluePart(self);
        green = Graphics_Color_greenPart(self);
        red   = Graphics_Color_redPart(self);
        gfx_set(red, green, blue);
    );

    //--------------------

    function Graphics_Color_make (red, green, blue)
        /** Returns a new color combined from parts <red>, <green>
        and <blue> between 0 and 1 */
    (
        blue  = forceToRange(blue * 255, 0, 255, true);
        green = forceToRange(green * 255, 0, 255, true);
        red   = forceToRange(red * 255, 0, 255, true);
        blue + (green + red << 8) << 8
    );

    //--------------------

    Graphics_Color_black       = Graphics_Color_make(  0,   0,   0);
    Graphics_Color_darkBlue    = Graphics_Color_make(  0,   0, 0.5);
    Graphics_Color_blue        = Graphics_Color_make(  0,   0,   1);
    Graphics_Color_darkGreen   = Graphics_Color_make(  0, 0.5,   0);
    Graphics_Color_green       = Graphics_Color_make(  0,   1,   0);
    Graphics_Color_darkCyan    = Graphics_Color_make(  0, 0.5, 0.5);
    Graphics_Color_cyan        = Graphics_Color_make(  0,   1,   1);
    Graphics_Color_darkRed     = Graphics_Color_make(0.5,   0,   0);
    Graphics_Color_red         = Graphics_Color_make(  1,   0,   0);
    Graphics_Color_darkMagenta = Graphics_Color_make(0.5,   0, 0.5);
    Graphics_Color_magenta     = Graphics_Color_make(  1,   0,   1);
    Graphics_Color_darkYellow  = Graphics_Color_make(0.5, 0.5,   0);
    Graphics_Color_yellow      = Graphics_Color_make(  1,   1,   0);
    Graphics_Color_grey        = Graphics_Color_make(0.5, 0.5, 0.5);
    Graphics_Color_white       = Graphics_Color_make(  1,   1,   1);

    //========================================
    // General Graphics
    //========================================

    function Graphics_clear (color)
        /** Sets background to colour specified by <color> */
    (
        Graphics_color_set(color);
        gfx_rect(0, 0, gfx_w, gfx_h);
    );

    //========================================
    // Graphics Memory, Text & String Matrix
    //========================================

    Graphics_Font_name = "Courier New";
    Graphics_Font_size = 20;

    Graphics_Mode_COUNT = 3;
    Graphics_Mode_effect   = 0;
    Graphics_Mode_memory   = 1;
    Graphics_Mode_string   = 2;
    Graphics_Mode_textData = 3;

    Graphics_currentMode = Graphics_Mode_effect;

    Graphics_MTSMatrix_maximumIndexList = null;
    Graphics_MTSMatrix_startIndexList   = null;
    Graphics_MTSMatrix_dataTable        = null;

    // data entries in MTS matrix
    Graphics_MTSMatrix_TextEntry_SIZE = 2;
    Graphics_MTSMatrix_TextEntry_color  = 0;
    Graphics_MTSMatrix_TextEntry_string = 1;

    Graphics_MTSMatrix_dataMaximumCount = 300;

    //--------------------
    //--------------------

    function Graphics_MTSMatrix_clearDataTable ()
        /** Sets data matrix to empty */
    (
        FixedArray_setAt(Graphics_MTSMatrix_startIndexList,
                         Graphics_Mode_textData, 0);
        FixedArray_setAt(Graphics_MTSMatrix_maximumIndexList,
                         Graphics_Mode_textData, 0);
    );

    //--------------------

    function Graphics_MTSMatrix_initialize ()
        /** Initializes internal data of data matrix */
        local (textEntry i maList totalCount vaList)
    (
        // initialize maximum address and view address lists
        maList = FixedArray_make(Graphics_Mode_COUNT);
        Graphics_MTSMatrix_maximumIndexList = maList;
        FixedArray_setAt(maList, Graphics_Mode_memory,
                         __memtop());
        FixedArray_setAt(maList, Graphics_Mode_string, 1023);

        vaList = FixedArray_make(Graphics_Mode_COUNT);
        Graphics_MTSMatrix_startIndexList = vaList;
        FixedArray_setAt(vaList, Graphics_Mode_memory, 0);
        FixedArray_setAt(vaList, Graphics_Mode_string, 0);

        // initialize data entry list
        totalCount = Graphics_MTSMatrix_dataMaximumCount;
        Graphics_MTSMatrix_dataTable =
            Memory_allocateArray(totalCount,
                                 Graphics_MTSMatrix_TextEntry_SIZE);
        i = 1;

        while (i <= totalCount) (
            textEntry = ARRAYADDR(Graphics_MTSMatrix_dataTable, i - 1,
                                  Graphics_MTSMatrix_TextEntry_SIZE);
            textEntry[Graphics_MTSMatrix_TextEntry_string] =
                String_make();
            i += 1;
        );

        Graphics_MTSMatrix_clearDataTable();
        Graphics_currentMode = Graphics_Mode_effect;
    );

    //--------------------

    function Graphics_MTSMatrix_columnCount ()
        /** Tells the column count of the memory matrix calculated
            from width and standard column */
        local (h referenceWidth st)
    (
        st = iif(Graphics_currentMode == Graphics_Mode_memory,
                     "00000: 000000000000 ",
                 Graphics_currentMode == Graphics_Mode_string,
                     "0000: XXXXXXXXXXXXXXX ",
                 Graphics_currentMode == Graphics_Mode_textData,
                     "XXXXXXXXXXXXXXXXXXXX ",
                 "X");
        gfx_measurestr(st, referenceWidth, h);
        max(1, floor(gfx_w / referenceWidth))
    );

    //--------------------

    function Graphics_MTSMatrix_rowCount ()
        /** Tells the row count of the memory matrix calculated
            from height and textheight */
    (
        max(1, floor(gfx_h / gfx_texth))
    );

    //--------------------

    function Graphics_MTSMatrix_showEntry (index)
        /** Shows memory, data or string matrix in current
            mode */
        local (color indexTemplate isString st template textEntry)
    (
        st == 0 ? (
            st = String_make();
        );

        Graphics_currentMode > 0 ? (
            Graphics_currentMode == Graphics_Mode_textData ? (
                textEntry =
                    ARRAYADDR(Graphics_MTSMatrix_dataTable,
                              index, Graphics_MTSMatrix_TextEntry_SIZE);
                color = textEntry[Graphics_MTSMatrix_TextEntry_color];
                Graphics_color_set(color);
                String_copy(st,
                            textEntry[Graphics_MTSMatrix_TextEntry_string]);
                gfx_drawstr(st);
            ) : (
                isString =
                    (Graphics_currentMode == Graphics_Mode_string);
                template = (isString ? "%4d: " : "%5d: ");
                Graphics_color_set(Graphics_Color_darkGreen);
                gfx_printf(template, index);
                Graphics_color_set(Graphics_Color_white);
                data = (isString ? index : index[]);
                template = (isString ? "%.15s"
                            : (floor(data) == data ? "%12i"
                               : "%+5.4e"));
                gfx_printf(template, data);
            );
        );
    );

    //--------------------

    function Graphics_MTSMatrix_show ()
        /** Shows contents of memory, data or string matrix depending
            on current mode and start index and maximum index
            settings */
        local (columnCount columnIndex data deltaX deltaY
               index maximumIndex rowCount rowIndex x)
    (
        Graphics_currentMode > 0 ? (
            gfx_setfont(1, Graphics_Font_name, Graphics_Font_size);
            columnCount = Graphics_MTSMatrix_columnCount();
            rowCount    = Graphics_MTSMatrix_rowCount();
            deltaX = gfx_w / columnCount;
            deltaY = gfx_h / rowCount;
            index =
                FixedArray_getAt(Graphics_MTSMatrix_startIndexList,
                                 Graphics_currentMode);
            maximumindex =
                FixedArray_getAt(Graphics_MTSMatrix_maximumIndexList,
                                 Graphics_currentMode);
            columnIndex = 1;

            while (columnIndex <= columnCount) (
                x = deltaX * (columnIndex - 1);
                rowIndex = 1;

                while (rowIndex <= rowCount) (
                    index <= maximumIndex ? (
                        gfx_x = x;
                        gfx_y = deltaY * (rowIndex - 1);
                        Graphics_MTSMatrix_showEntry(index);
                        index += 1;
                    );

                    rowIndex += 1;
                );

                columnIndex += 1;
            );
        );
    );

    //--------------------

    function Graphics_MTSMatrix_addTextEntry (color, st)
        /** Adds data entry at next position to (<color>,<st>) */
        local (index textEntry)
    (
        index =
            FixedArray_getAt(Graphics_MTSMatrix_maximumIndexList,
                             Graphics_Mode_textData);

        index < Graphics_MTSMatrix_dataMaximumCount ? (
            textEntry = ARRAYADDR(Graphics_MTSMatrix_dataTable, index,
                                  Graphics_MTSMatrix_TextEntry_SIZE);
            index += 1;
            FixedArray_setAt(Graphics_MTSMatrix_maximumIndexList,
                             Graphics_Mode_textData, index);
            textEntry[Graphics_MTSMatrix_TextEntry_color] = color;
            String_copy(textEntry[Graphics_MTSMatrix_TextEntry_string],
                        st);
        );
    );

    //--------------------

    key_0     = $'0';
    key_plus  = $'+';
    key_minus = $'-';
    key_d     = $'d';
    key_e     = $'e';
    key_m     = $'m';
    key_s     = $'s';

    //--------------------

    function Graphics_MTSMatrix_handleKey (key)
        /** Handles <key> in MTS matrix; if processed, 0 is returned,
            otherwise the key itself */
        local (index pageSize result)
    (
        result = iif(key == key_d || key == key_m
                     || key == key_n || key == key_s, 0, key);
        Graphics_currentMode =
            iif(key == key_d, Graphics_Mode_textData,
                key == key_e, Graphics_Mode_effect,
                key == key_m, Graphics_Mode_memory,
                key == key_s, Graphics_Mode_string,
                Graphics_currentMode);
        pageSize = (Graphics_MTSMatrix_rowCount() 
                    * Graphics_MTSMatrix_columnCount());

        Graphics_currentMode == Graphics_Mode_effect ? (
            Graphics_clear(Graphics_Color_black);
        ) : (
            maximumIndex =
                FixedArray_getAt(Graphics_MTSMatrix_maximumIndexList,
                                 Graphics_currentMode);
            startIndex =
                FixedArray_getAt(Graphics_MTSMatrix_startIndexList,
                                 Graphics_currentMode);
            startIndex =
                iif(key == key_plus,  startIndex + pageSize,
                    key == key_minus, startIndex - pageSize,
                    key == key_0,     0, startIndex);
            startIndex =
                forceToRange(startIndex, 0, maximumIndex, true);

            FixedArray_setAt(Graphics_MTSMatrix_startIndexList,
                             Graphics_currentMode, startIndex);
            Graphics_MTSMatrix_show();
            result = 0;
        );

        result
    );

    //============================================================

    Graphics_MTSMatrix_initialize();

//============================================================
