desc:SOX Overdrive
// emulates the overdrive effect of SOX
tags: overdrive
author: Dr. Thomas Tensi, 2019

//--------------------
// IMPORTS
//--------------------

import Base.jsfx-inc
import Base_memory.jsfx-inc
import Base_integerset.jsfx-inc
import Base_fixedarray.jsfx-inc
import Base_string.jsfx-inc
import Base_display.jsfx-inc
import Base_debug.jsfx-inc

import SOX__base.jsfx-inc
import SOX__samplequeue.jsfx-inc

//--------------------
// SLIDERS
//--------------------
slider1:dBGain=20<0,100,1>Gain [dB]
slider2:colour=20<0,100,1>Colour [%]

//--------------------
// INITIALIZATION
//--------------------
@init
    //============================================================

    SOXOverdrive_SIZE = 3;
    SOXOverdrive_gainFactor      = 1;
    SOXOverdrive_colour          = 2;
    SOXOverdrive_sampleQueueList = 3;

    //--------------------

    function SOXOverdrive_init (self, dBGain, colour)
        /** Sets parameters of overdrive effect <self> to <dbGain> and
            <colour> and clears all sample queues */
        local(sampleQueueList)
    (
        FixedArray_setAt(self, SOXOverdrive_gainFactor,
                         SOX_dBToLinear(dBGain));
        FixedArray_setAt(self, SOXOverdrive_colour, colour / 200);
        sampleQueueList =
            FixedArray_getAt(self, SOXOverdrive_sampleQueueList);
        SOXSampleQueueList_setToZero(sampleQueueList);
    );

    //--------------------

    function SOXOverdrive_make ()
        /** Makes a new overdrive effect */
        local (sampleQueueList self)
    (
        self = FixedArray_make(SOXOverdrive_SIZE);
        sampleQueueList = SOXSampleQueueList_make(1, true);
        FixedArray_setAt(self, SOXOverdrive_sampleQueueList,
                         sampleQueueList);
        SOXOverdrive_init(self, 0, 0);
        self
    );

    //--------------------

    function SOXOverdrive_apply (self, inputSampleList, outputSampleList)
        /** Distorts samples from <inputSampleList> by effect <self>
            in all channels with a simple tanh distortion and returns
            result in <outputSampleList> */
        local(channel colour gainFactor inputSample inputSampleQueue
              newValue outputSample outputSampleQueue
              previousInputSample previousOutputSample queueIndex
              sampleQueueList)
    (
        gainFactor =
            FixedArray_getAt(self, SOXOverdrive_gainFactor);
        colour =
            FixedArray_getAt(self, SOXOverdrive_colour);
        sampleQueueList =
            FixedArray_getAt(self, SOXOverdrive_sampleQueueList);
        
        channel = 1;
        queueIndex = 1;

        while (channel <= SOX_channelCount) (
            inputSample = FixedArray_getAt(inputSampleList, channel);
            inputSampleQueue  = FixedArray_getAt(sampleQueueList,
                                                 queueIndex);
            outputSampleQueue = FixedArray_getAt(sampleQueueList,
                                                 queueIndex + 1);
            previousInputSample  =
                SOXSampleQueue_first(inputSampleQueue);
            previousOutputSample =
                SOXSampleQueue_first(outputSampleQueue);

            newValue = inputSample * gainFactor + colour;
            newValue = min(1, max(-1, newValue));
            newValue = newValue - newValue * newValue * newValue / 3;

            outputSample = (newValue - previousInputSample
                            + 0.995 * previousOutputSample);
            FixedArray_setAt(outputSampleList, channel,
                             inputSample * 0.5 + outputSample * 0.75);
            SOXSampleQueue_setFirst(inputSampleQueue, newValue);
            SOXSampleQueue_setFirst(outputSampleQueue, outputSample);

            channel += 1;
            queueIndex += 2;
        );
    );

    //============================================================

    function SOXOverdrive_Graphics_handleKey (key)
    (
        Graphics_currentMode == Graphics_Mode_effect ? (
            Graphics_clear(Graphics_Color_black);
        );
    );

    //============================================================

    overdrive = SOXOverdrive_make();

//--------------------
// SLIDER CHANGE
//--------------------
@slider
    SOXOverdrive_init(overdrive, dBGain, colour);

//--------------------
// SAMPLE
//--------------------
@sample
    SOX_readInputSampleList();
    SOXOverdrive_apply(overdrive,
                       SOX_inputSampleList, SOX_outputSampleList);
    SOX_writeOutputSampleList();

//--------------------
// GRAPHICS
//--------------------
@gfx
    key = gfx_getchar();
    key = Graphics_MTSMatrix_handleKey(key);
    SOXOverdrive_Graphics_handleKey(key);
