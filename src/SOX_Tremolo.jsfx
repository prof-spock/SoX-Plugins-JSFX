desc: SOX Tremolo
tags: tremolo frequency modulation
author: Dr. Thomas Tensi, 2019

//--------------------
// IMPORTS
//--------------------

import Base.jsfx-inc
import Base_memory.jsfx-inc
import Base_integerset.jsfx-inc
import Base_fixedarray.jsfx-inc
import Base_string.jsfx-inc
import Base_display.jsfx-inc
import Base_debug.jsfx-inc

import SOX__base.jsfx-inc
import SOX__waveform.jsfx-inc

//--------------------
// SLIDERS
//--------------------
slider1:frequency=0.5<0.1,2.0,0.001>Modulation [Hz]
slider2:depth=40<0,100,1>Depth [%]
slider3:timeOffset=0<-100000,100000,0.0001>Time Offset [s]

//--------------------
// INITIALIZATION
//--------------------
@init
    //============================================================

    function SOXTremolo_Graphics_handleKey (key)
    (
        Graphics_currentMode == Graphics_Mode_effect ? (
            Graphics_clear(Graphics_Color_black);
        );
    );

    //============================================================

    SOXTremolo_defaultPhase = degreesToRadians(90);

    //--------------------

    SOXTremolo_SIZE = 3;
    SOXTremolo_x          = 1;
    SOXTremolo_xIncrement = 2;
    SOXTremolo_yOffset    = 3;

    //--------------------
    //--------------------

    function SOXTremolo_init (self,
                              sampleRate, frequency, modulationDepth, phase)
        /** Initializes tremolo effect <self> with <sampleRate>,
            modulation <frequency>, <modulationDepth> and <phase> */
        local (xIncrement yOffset)
    (
        xIncrement = twoPi * frequency / sampleRate;
        yOffset    = (1 - modulationDepth / 200);

        FixedArray_setAt(self, SOXTremolo_x,          phase);
        FixedArray_setAt(self, SOXTremolo_xIncrement, xIncrement);
        FixedArray_setAt(self, SOXTremolo_yOffset,    yOffset);
    );

    //--------------------

    function SOXTremolo_make ()
        /** Constructs a tremolo effect */
        local (self)
    (
        self = FixedArray_make(SOXTremolo_SIZE);
        SOXTremolo_init(self, srate, 1, 25, SOXTremolo_defaultPhase);
        self
    );

    //--------------------

    function SOXTremolo_apply (self, inputSampleList, outputSampleList)
        /** Applies a double band suppressed carrier modulation <self>
            to <inputSampleList> and returns output in
            <outputSampleList> */
        local (channel factor inputSample outputSample x xIncrement yOffset)
    (
        x          = FixedArray_getAt(self, SOXTremolo_x);
        xIncrement = FixedArray_getAt(self, SOXTremolo_xIncrement);
        yOffset    = FixedArray_getAt(self, SOXTremolo_yOffset);
        factor = sin(x) * (1 - yOffset) + yOffset;
        
        channel = 1;

        while (channel <= SOX_channelCount) (
            inputSample  = FixedArray_getAt(inputSampleList, channel);
            outputSample = inputSample * factor;
            FixedArray_setAt(outputSampleList, channel, outputSample);
            channel += 1;
        );

        x += xIncrement;
        x = modulo(x, twoPi);
        FixedArray_setAt(self, SOXTremolo_x, x);
    );

    //============================================================

    tremolo = SOXTremolo_make();

//--------------------
// SLIDER CHANGE
//--------------------
@slider
    previousPlayPosition = maximumInteger;
    effectivePhase = SOXTremolo_defaultPhase;

    SOXTremolo_init(tremolo, srate, frequency, depth, effectivePhase);

//--------------------
// SAMPLE
//--------------------

@sample
    (play_position < previousPlayPosition
     || play_position > previousPlayPosition + 0.1) ? (
        deltaPhase = SOXWaveForm_adjustPhaseByTime(frequency,
                                                   timeOffset,
                                                   play_position);
        effectivePhase = SOXTremolo_defaultPhase + deltaPhase;
        SOXTremolo_init(tremolo, srate, frequency, depth, effectivePhase);
    );

    previousPlayPosition = play_position;
    SOX_readInputSampleList();
    SOXTremolo_apply(tremolo, SOX_inputSampleList, SOX_outputSampleList);
    SOX_writeOutputSampleList();

//--------------------
// GRAPHICS
//--------------------
@gfx
    key = gfx_getchar();
    key = Graphics_MTSMatrix_handleKey(key);
    SOXTremolo_Graphics_handleKey(key);
